--Cree un procedimiento almacenado que permita insertar un nuevo usuario retornando un mensaje que indique si la inserción fue satisfactoria.
DELIMITER $$
CREATE PROCEDURE insert_user(
    IN nombre VARCHAR(50),
    IN email VARCHAR(100),
    IN constrasena VARCHAR(100),
    IN fecha_creacion TIMESTAMP
)
BEGIN
    DECLARE message VARCHAR(100);

    INSERT INTO usuarios (nombre, email, contrasena, fecha_creacion)
    VALUES (nombre, email, contrasena, fecha_creacion);

    IF ROW_COUNT() > 0 THEN
        SET message = 'Usuario registrado correctamente';
    ELSE 
        SET message = 'Error al registrar el usuario';
    END IF;

    SELECT message AS mensaje;
END $$

DELIMITER ;

CALL insert_user('Valentina Caballero', 'valen08@gmail.com', 'hodeth0116', '2024-01-16 12:12:16.0');

--Cree un procedimiento almacenado que permita eliminar un usuario retornando un mensaje que indique si la inserción fue satisfactoria.
DELIMITER $$

CREATE PROCEDURE delete_users(
    IN usuario_id_delete INT
)

BEGIN
    DECLARE message VARCHAR(100);

    DELETE FROM usuarios WHERE usuario_id = usuario_id_delete;

    IF ROW_COUNT() > 0 THEN
        SET message = CONCAT('El producto con ID', usuario_id_delete, 'ha sido eliminado');
    ELSE 
        SET message = 'No se encontró ningún usuario con el ID proporcionado';
    END IF;
    SELECT message AS 'Mensaje';
END $$

DELIMITER ;

CALL delete_users(3);

--Cree un procedimiento almacenado que permita editar un usuario retornando un mensaje que indique si la inserción fue satisfactoria.
DELIMITER $$

CREATE PROCEDURE actualizar_user(
    IN usuario_id_nuevo INT,
    IN nombre_nuevo VARCHAR(50),
    IN email_nuevo VARCHAR(100),
    IN contrasena_nuevo VARCHAR(100),
    IN fecha_creacion_nuevo TIMESTAMP
)

BEGIN 
    DECLARE message VARCHAR(100);
    UPDATE usuarios
    SET nombre = nombre_nuevo, email = email_nuevo, contrasena = contrasena_nuevo, fecha_creacion = fecha_creacion_nuevo
    WHERE usuario_id = usuario_id_nuevo;

    IF ROW_COUNT() > 0 THEN
        SET message = CONCAT('El usuario con ID ', usuario_id_nuevo, ' ha sido actualizado exitosamente.');
    ELSE 
        SET message = 'No se encontró ningún producto con el ID proporcionado para actualizar.';
    END IF;
    SELECT message AS 'Mensaje';
END $$
DELIMITER ;

CALL actualizar_user(1, 'Julián Pérez', 'julian.perez@gmail.com', 'julian12345', '2025-03-12 12:13:02.2');

--Cree un procedimiento almacenado que permita buscar un usuario por su nombre.
DELIMITER $$
CREATE PROCEDURE buscar_usuario_nombre(
    IN nombre_buscado VARCHAR(50)
)
BEGIN
    SELECT nombre, email, contrasena, fecha_creacion
    FROM usuarios
    WHERE nombre = nombre_buscado;
END $$

DELIMITER ;

CALL buscar_usuario_nombre('Julián Pérez');

--Realice una consulta que permita iniciar una conversación.
DELIMITER $$
CREATE PROCEDURE iniciar_conversacion(
    IN nombre_conversacion VARCHAR(100)
)
BEGIN
    DECLARE message VARCHAR(100);

    INSERT INTO conversaciones (nombre_conversacion)
    VALUES (nombre_conversacion);

    IF ROW_COUNT() > 0 THEN
        SET message = CONCAT('La conversación ', nombre_conversacion, ' ha sido iniciada exitosamente.');
    ELSE
        SET message = 'Error al iniciar la conversación';
    END IF;

    SELECT message AS mensaje;
END $$
DELIMITER ;

CALL iniciar_conversacion('Conversación Administración');

--Realice un procedimiento almacenado que permita agregar un nuevo participante a la conversación y valide si hay capacidad disponible. La cantidad maxima por cada conversación son 5 usuarios.
DELIMITER $$

CREATE PROCEDURE añadir_participantes(
	IN conversacion_id INT,
	IN usuario_id INT
)

BEGIN
	DECLARE message VARCHAR(100);
    DECLARE cantidad_participantes INT;

    SELECT COUNT(*) INTO cantidad_participantes
    FROM participantes
    INNER JOIN conversaciones ON participantes.conversacion_id = conversaciones.conversacion_id
    WHERE conversaciones.conversacion_id = conversacion_id;

	IF cantidad_participantes < 5 THEN
        INSERT INTO participantes (conversacion_id, usuario_id)
        VALUES (conversacion_id, usuario_id);
		SET message = 'Participante añadido correctamente';
	ELSE 
		SET message = 'No es posible añadir más participante a esta conversación';
	END IF;

    SELECT message AS mensaje;
END $$
DELIMITER ; 
CALL añadir_participantes(1,1);
CALL añadir_participantes(1,5);
CALL añadir_participantes(1,6);
CALL añadir_participantes(1,7);
CALL añadir_participantes(1,10);

--Realice un procedimiento que permita visualizar los mensaje de una conversación.
DELIMITER $$

CREATE PROCEDURE mensajes_conversacion(
	IN conversacion_id INT
)

BEGIN
	SELECT conversacion_id, mensaje_id, remitente_id, contenido, fecha_envio
	FROM conversaciones
	INNER JOIN mensajes ON conversaciones.conversacion_id = mensajes.conversacion_id
	WHERE mensajes.conversacion_id = conversacion_id;

END $$
DELIMITER ; 
CALL mensajes_conversacion(1);

--Realice un procedimiento almacenado para enviar un mensaje a una conversación.
DELIMITER $$

CREATE PROCEDURE enviar_mensaje(
	IN conversacion_id INT,
	IN remitente_id INT,
	IN contenido TEXT
)

BEGIN
	DECLARE message VARCHAR(100);

	INSERT INTO mensajes(conversacion_id, remitente_id, contenido)
	VALUES (conversacion_id, remitente_id, contenido);

	IF ROW_COUNT() > 0 THEN
		SET message = CONCAT('El mensaje ', contenido, ' fue enviado correctamente');
	ELSE 
		SET message = 'Error al enviar el mensaje';
	END IF;
	SELECT message AS 'Mensaje';

END $$
DELIMITER ; 

CALL enviar_mensaje(1, 1, 'Hola, ¿cómo están?');

--Modifica la estructura de la tabla para que permita el envio de los mensaje a todos los usuarios o a un usuario en particular. y realice las siguientes consultas.
CREATE TABLE mensaje_destinatarios (
    mensaje_id INT NOT NULL,
    destinatario_id INT NOT NULL,
    PRIMARY KEY (mensaje_id, destinatario_id),
    FOREIGN KEY (mensaje_id) REFERENCES mensajes(mensaje_id) ON DELETE CASCADE,
    FOREIGN KEY (destinatario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE
);

--Realice un procedimiento almacenado que permita visualizar los mensajes de un usuario especifico.
DELIMITER $$
CREATE PROCEDURE mensajes_usuario(
    IN usuario_mensaje_id INT
)

BEGIN 
    SELECT m.mensaje_id, m.contenido, m.fecha_envio, m.remitente_id
    FROM mensajes m
    LEFT JOIN mensaje_destinatarios me ON m.mensaje_id = me.mensaje_id
    WHERE me.destinatario_id = usuario_mensaje_id;
END $$
DELIMITER ;

--Realice un procedimiento almacenado que permita eliminar a un usuario que no esta respetando las normas de buena conversación. Agregue una tabla que permita agregar palabra no deseadas. El procedimiento debe inspeccionar la conversación a verificar.
CREATE TABLE palabras_no_deseadas (
    palabra_id INT AUTO_INCREMENT PRIMARY KEY,
    palabra VARCHAR(50) NOT NULL
);

DELIMITER $$

CREATE PROCEDURE eliminarUsuarioPorMalComportamiento(
    IN p_conversacion_id INT
)
BEGIN
    DECLARE fin INT DEFAULT 0;
    DECLARE mensaje_id INT;
    DECLARE usuario_id INT;
    DECLARE contenido TEXT;
    DECLARE palabra VARCHAR(50);

    -- Cursor que itera por cada mensaje de la conversación
    DECLARE cursor_mensajes CURSOR FOR 
        SELECT mensaje_id, remitente_id, contenido
        FROM mensajes
        WHERE conversacion_id = p_conversacion_id;

    -- Cursor que itera por cada palabra no deseada
    DECLARE cursor_palabras CURSOR FOR 
        SELECT palabra
        FROM palabras_no_deseadas;

    -- Finalizar el cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin = 1;

    -- Abrir cursor de mensajes
    OPEN cursor_mensajes;

    -- Itera sobre cada mensaje de la conversación
    leer_mensajes: LOOP 
        FETCH cursor_mensajes INTO mensaje_id, usuario_id, contenido;
        IF fin THEN
            LEAVE leer_mensajes;
        END IF;

        -- Abrir cursor de palabras no deseadas
        OPEN cursor_palabras;
        SET fin = 0;

        -- Itera sobre cada palabra no deseada
        leer_palabras: LOOP
            FETCH cursor_palabras INTO palabra;
            IF fin THEN
                LEAVE leer_palabras;
            END IF;

            -- Verificar contenido del mensaje
            IF LOCATE(palabra, contenido) > 0 THEN
                -- Eliminar usuario
                DELETE FROM participantes
                WHERE conversacion_id = p_conversacion_id AND usuario_id = usuario_id;

                -- Salir del bucle de palabras
                LEAVE leer_palabras;
            END IF;
        END LOOP leer_palabras;

        -- Cerrar cursor de palabras no deseadas
        CLOSE cursor_palabras;
    END LOOP leer_mensajes;

    -- Cerrar cursor de mensajes
    CLOSE cursor_mensajes;
END $$

DELIMITER ;

CALL eliminarUsuarioPorMalComportamiento(2);
